1.理解左手坐标系
    左手坐标系是指在空间直角坐标系中，让左手拇指指向x轴的正方向，食指指向y轴的正方向，
    如果中指能指向z轴的正方向，则称这个坐标系为左手直角坐标系。反之则是右手直角坐标系。

2.理解世界坐标系、局部坐标系
    局部坐标旋转是指以父物体为参考，进行旋转。坐标系以物体的中心为坐标原点，物体的旋转、平移等操作都是围绕局部坐标系进行的，
    这时，当物体模型进行旋转或平移等操作时，局部坐标系也执行相应的旋转或平移操作。
    世界坐标系是系统的绝对坐标系，在没有建立用户坐标系之前画面上所有点的坐标都是以该坐标系的原点来确定各自的位置的，
    世界坐标系以“坐标陀螺”来进行旋转。
    类似的情况例如：
    东、南、西、北、是世界坐标系。
    前、后、左、右是局部坐标系


3.Vector3在不同上下文下的含义
Vector3.normalized //规范化,非静态属性,返回值类型vector3
Vector3.Normalize() //规范化,静态函数,返回值类型void
vector3.magniude //向量的长度
Vector3.SqrMagnitude //向量的长度平方
Vector3: Static Variables //静态变量
Vector3.Distance() //距离
Vecter3.Dot //点乘
Vector3.Cross //叉乘

4.理解屏幕坐标，以及屏幕坐标与视图坐标、世界坐标的转换
World：世界坐标系，又称世界空间。位于各视口左下角的图标，显示了世界坐标系的方向，
其坐标原点位于视口中心。该坐标系永远不会变化。

Screen：屏幕坐标系，此时将使用活动视口屏幕作为坐标系。在活动视口中，x轴将永远在视图的水平方向并且正向向右，
y轴将永远在视图的垂直方向并且正向向上，z轴将永远垂直于屏幕并且正向指向用户。

View：视图坐标系，它混合了世界坐标系与屏幕坐标系。
其中，在正交视图（如前视图、俯视图、左视图、右视图等）中使用屏幕坐标系，而在透视等非正交视图中使用世界坐标系。


5.理解什么是向量
为带箭头的线段。箭头所指：代表向量的方向；线段长度：代表向量的大小。

6.向量的两种几何表示方法
属性：
[x]//向量的X组件。
[y]//向量的Y组件。
[z]//向量的Z组件。
[this [int index]]//使用[0], [1], [2]分别访问组件x, y, z组件。简单来说就是用索引号代替x, y, z组件。
[normalized]//返回向量的长度为1
[magnitude]// 返回向量的长度
[sqrMagnitude]//返回这个向量的长度的平方

方法：
[Lerp]两个向量之间的线性插值。
[Slerp]球形插值在两个向量之间。
[OrthoNormalize]使向量规范化并且彼此相互垂直。
[MoveTowards]当前的地点移向目标。
[RotateTowards]当前的向量转向目标。
[SmoothDamp]随着时间的推移，逐渐改变一个向量朝向预期的目标。
[Scale]两个矢量组件对应相乘。
[Cross]两个向量的交叉乘积。返回lhs x rhs
[Reflect]沿着法线反射向量。
[Dot]两个向量的点乘积。
[Project]投影一个向量到另一个向量。
[Angle]由from和to两者返回一个角度。
[Distance]返回a和b之间的距离。
[ClampMagnitude]返回向量的长度，最大不超过maxLength所指示的长度。
[Min]返回一个由两个向量的最小组件组成的向量。
[Max]返回一个由两个向量的最大组件组成的向量。

7.理解向量的加法、减法、数乘、标准化以及他们的几何意义
加法：
Vector3 a = new Vector3(0, 0, 0);
Vector3 b = new Vector3(1, 1, 1);
Vector3 c = a + b = (0+1,0+1,0+1)=(1,1,1);
//几何意义为：平移向量，使向量a的头连接向量b的尾，接着从a的尾向b的头画一个向量。这就是向量加法的“三角形法则”。

减法
Vector3 a = new Vector3(2, 2, 2);
Vector3 b = new Vector3(1, 1, 1);
Vector3 c = a + b = (2-1,2-1,2-1)=(1,1,1);//

数乘
数乘就是与标量相乘，该运算可对向量进行缩放

标准化
Vector3 A = new Vector3(1, 2, 3);
Vector3 B = new Vector3(2, 4, 5);
Vector3 v = (B - A).normalized;//AB向量归一化后的坐标：(1/3,2/3,2/3)
//2D环境中，如果以原点为尾画一个单位向量，那么向量的头将接触到圆心在原点的单位圆。3D环境中单位向量将接触单位球。

8.理解向量的点积、叉积以及它们的应用
点积：
Vector3 A = new Vector3(1, 1);
Vector3 B = new Vector3(1, 0);
float dot = Vector3.Dot(A, B);//A向量与B向量的点乘为：1
float angle = Vector3.Angle(A, B);//A向量与B向量的夹角为：45
叉积：
Vector3 A = new Vector3(1, 2, 3);
Vector3 B = new Vector3(-2, -2, 3);
Vector3 cross = Vector3.Cross(A, B);//A向量与B向量的叉乘为：(12,-9,2)

9.了解Vector3这个结构体提供的属性和方法
Vector3.MoveTowards()  //移动到目标位置
Vector3.Project()  //在线上的投影
Vector3.ProjectOnPlane //在面上的投影
Vector3.PSqrMagnitude  //向量的长度平方

​10.理解向量和位置的关系
向量有大小和方向,但没有位置

考考你：
点乘和叉乘的应用？
点乘：两个向量点乘得到一个标量 ，数值等于两个向量长度相乘后再乘以二者夹角的余弦值 。
如果两个向量a,b均 为单位 向量 ,那么a.b等于向量b在向量a方向上的投影的长度。点乘后得到的是一个值
若结果 = 0，则两向量互相垂直 。
若结果 < 0 ，则两向量夹角大于90°。
若结果 >0 ，则两向量夹角小于 90°。

叉乘：两个向量的叉乘得到一个新的向量 ,新向量垂直于原来的两个向量再乘夹角的正弦值。叉乘后得到的还是一个向量、
两个向量的点乘所得到的是两个向量的余弦值，也就是-1 到1之间，0表示垂直，-1表示相反，1表示相同方向。 
两个向量的叉乘所得到的是两个向量所组成的面的垂直向量，分两个方向。 
简单的说，点乘判断角度，叉乘判断方向。

帮帮我：
向量投影的含义和应用？